/*! For license information please see index.js.LICENSE.txt */
(()=>{var r={99:(r,e,t)=>{"use strict";t.d(e,{Z:()=>c});var n=t(537),o=t.n(n),i=t(645),a=t.n(i)()(o());a.push([r.id,'.btn{padding:24px;border-radius:24px;border:none;font-size:16px;font-weight:400;width:100%;cursor:pointer}.btn__primary{color:#fff;background-color:#0a3871}.btn__secondary{background-color:#f3f5fc;border:#0a3871 solid 1px;color:#0a3871}.btn__secondary.white{background-color:#fff}.autogrow,.grow-wrap textarea,.grow-wrap::after{border:1px solid #000;font-family:"Inter",sans-serif;grid-area:1/1/2/2;font-size:32px;word-break:break-all}.grow-wrap{display:grid;min-height:50vh}.grow-wrap::after{content:attr(data-replicated-value);white-space:pre-wrap;visibility:hidden}.grow-wrap textarea{resize:none;overflow:hidden;color:#0a3871;border:none;background:rgba(0,0,0,0)}.result-base,main .result,main .not-found{background:#fff;box-shadow:0px 24px 32px -8px rgba(0,0,0,.08);border-radius:32px;margin:40px 24px;padding:32px}@media(min-width: 769px){.result-base,main .result,main .not-found{min-width:28%;max-width:28%}}main{display:flex;flex-flow:column;position:relative;height:fit-content}@media(min-width: 769px){main{flex-flow:row;height:100%}}main .logo{position:absolute;width:32px;height:auto;top:24px;left:16px}@media(min-width: 460px){main .logo{top:73px;left:40px}}@media(min-width: 769px){main .logo{top:40px;left:84px}}main .entries{margin:24px 16px;padding-top:120px}@media(min-width: 460px){main .entries{margin:24px 40px;padding-top:150px}}@media(min-width: 769px){main .entries{margin:0;padding-left:15%;width:100%;display:flex;flex-direction:column;justify-content:space-between}}main .entries .wrapper .note{color:#495057;font-size:12px;margin:16px 0;display:flex;align-items:center;gap:8px}main .entries .wrapper .note img{width:16px;height:16px}main .entries .wrapper .note p{margin:0}main .entries .wrapper .actions{display:flex;flex-direction:column;gap:24px}@media(min-width: 460px){main .entries .wrapper .actions{flex-direction:row}}@media(min-width: 769px){main .entries .wrapper .actions{padding-bottom:72px}}main .not-found{text-align:center}main .not-found-img{display:none}@media(min-width: 769px){main .not-found-img{display:block;margin-bottom:16px}}main .not-found h1{color:#343a40;font-size:24px}main .not-found p{color:#495057;font-size:16px}@media(min-width: 769px){main .not-found{display:flex;flex-direction:column;justify-content:center}}main .result{display:flex;flex-direction:column;gap:32px;align-items:center;font-size:24px;color:#495057}main .result p{margin:0;line-height:150%;word-break:break-all}@media(min-width: 769px){main .result{justify-content:space-between}}main .inactive{display:none}body,html{margin:0;padding:0;background-color:#f3f5fc;font-family:"Inter",sans-serif;height:100%}',"",{version:3,sources:["webpack://./src/styles/buttons.scss","webpack://./src/styles/forms.scss","webpack://./src/styles/layout.scss","webpack://./src/styles/medias.scss","webpack://./src/styles.scss"],names:[],mappings:"AAAA,KACE,YAAA,CACA,kBAAA,CACA,WAAA,CACA,cAAA,CACA,eAAA,CACA,UAAA,CACA,cAAA,CACA,cACE,UAAA,CACA,wBAAA,CAEF,gBACE,wBAAA,CACA,wBAAA,CACA,aAAA,CACA,sBACE,qBAAA,CCjBN,gDACE,qBAAA,CACA,8BAAA,CACA,iBAAA,CACA,cAAA,CACA,oBAAA,CAGF,WACE,YAAA,CACA,eAAA,CACA,kBACE,mCAAA,CACA,oBAAA,CACA,iBAAA,CAIF,oBACE,WAAA,CACA,eAAA,CACA,aAAA,CACA,WAAA,CACA,wBAAA,CCrBJ,0CACE,eAAA,CACA,6CAAA,CACA,kBAAA,CACA,gBAAA,CACA,YAAA,CCOE,yBDZJ,0CAOI,aAAA,CACA,aAAA,CAAA,CAIJ,KACE,YAAA,CACA,gBAAA,CACA,iBAAA,CACA,kBAAA,CCJE,yBAAA,KDMA,aAAA,CACA,WAAA,CAAA,CAGF,WACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,QAAA,CACA,SAAA,CCtBA,yBDiBF,WAOI,QAAA,CACA,SAAA,CAAA,CClBF,yBDUF,WAWI,QAAA,CACA,SAAA,CAAA,CAIJ,cACE,gBAAA,CACA,iBAAA,CCnCA,yBDiCF,cAII,gBAAA,CACA,iBAAA,CAAA,CC/BF,yBD0BF,cAQI,QAAA,CACA,gBAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAAA,CAIA,6BACE,aAAA,CACA,cAAA,CACA,aAAA,CACA,YAAA,CACA,kBAAA,CACA,OAAA,CACA,iCACE,UAAA,CACA,WAAA,CAEF,+BACE,QAAA,CAIJ,gCACE,YAAA,CACA,qBAAA,CACA,QAAA,CCrEJ,yBDkEE,gCAKI,kBAAA,CAAA,CChEN,yBD2DE,gCAQI,mBAAA,CAAA,CAMR,gBAEE,iBAAA,CACA,oBACE,YAAA,CC7EF,yBD4EA,oBAGI,aAAA,CACA,kBAAA,CAAA,CAGJ,mBACE,aAAA,CACA,cAAA,CAEF,kBACE,aAAA,CACA,cAAA,CCzFF,yBDyEF,gBAmBI,YAAA,CACA,qBAAA,CACA,sBAAA,CAAA,CAIJ,aAEE,YAAA,CACA,qBAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA,CACA,aAAA,CACA,eACE,QAAA,CACA,gBAAA,CACA,oBAAA,CC7GF,yBDkGF,aAcI,6BAAA,CAAA,CAIJ,eACE,YAAA,CE9HJ,UACE,QAAA,CACA,SAAA,CACA,wBAAA,CACA,8BAAA,CACA,WAAA",sourcesContent:[".btn {\r\n  padding: 24px;\r\n  border-radius: 24px;\r\n  border: none;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  &__primary {\r\n    color: #FFFFFF;\r\n    background-color: #0A3871;\r\n  }\r\n  &__secondary {\r\n    background-color: #f3f5fc;\r\n    border: #0A3871 solid 1px;\r\n    color: #0A3871;\r\n    &.white {\r\n      background-color: #ffffff;\r\n    }\r\n  }\r\n}",".autogrow {\r\n  border: 1px solid black;\r\n  font-family: 'Inter', sans-serif;\r\n  grid-area: 1 / 1 / 2 / 2;\r\n  font-size: 32px;\r\n  word-break: break-all;\r\n}\r\n\r\n.grow-wrap {\r\n  display: grid;\r\n  min-height: 50vh;\r\n  &::after {\r\n    content: attr(data-replicated-value);\r\n    white-space: pre-wrap;\r\n    visibility: hidden;\r\n    @extend .autogrow;\r\n  }\r\n  \r\n  textarea {\r\n    resize: none;\r\n    overflow: hidden;\r\n    color: #0A3871;\r\n    border: none;\r\n    background: transparent;\r\n    @extend .autogrow;\r\n  }\r\n}","@import './medias.scss';\r\n\r\n.result-base {\r\n  background: #ffffff;\r\n  box-shadow: 0px 24px 32px -8px rgba(0, 0, 0, 0.08);\r\n  border-radius: 32px;\r\n  margin: 40px 24px;\r\n  padding: 32px;\r\n  @include md-screen() {\r\n    min-width: 28%;\r\n    max-width: 28%;\r\n  }\r\n}\r\n\r\nmain {\r\n  display: flex;\r\n  flex-flow: column;\r\n  position: relative;\r\n  height: fit-content;\r\n  @include md-screen() {\r\n    flex-flow: row;\r\n    height: 100%;\r\n  }\r\n\r\n  .logo {\r\n    position: absolute;\r\n    width: 32px;\r\n    height: auto;\r\n    top: 24px;\r\n    left: 16px;\r\n    @include sm-screen() {\r\n      top: 73px;\r\n      left: 40px;\r\n    }\r\n    @include md-screen() {\r\n      top: 40px;\r\n      left: 84px;\r\n    }\r\n  }\r\n\r\n  .entries {\r\n    margin: 24px 16px;\r\n    padding-top: 120px;\r\n    @include sm-screen() {\r\n      margin: 24px 40px;\r\n      padding-top: 150px;\r\n    }\r\n    @include md-screen() {\r\n      margin: 0;\r\n      padding-left: 15%;\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    .wrapper {\r\n      .note {\r\n        color: #495057;\r\n        font-size: 12px;\r\n        margin: 16px 0;\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        img {\r\n          width: 16px;\r\n          height: 16px;\r\n        }\r\n        p {\r\n          margin: 0;\r\n        }\r\n      }\r\n  \r\n      .actions {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 24px;\r\n        @include sm-screen() {\r\n          flex-direction: row;\r\n        }\r\n        @include md-screen() {\r\n          padding-bottom: 72px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .not-found {\r\n    @extend .result-base;\r\n    text-align: center;\r\n    &-img {\r\n      display: none;\r\n      @include md-screen() {\r\n        display: block;\r\n        margin-bottom: 16px;\r\n      }\r\n    }\r\n    h1 {\r\n      color: #343A40;\r\n      font-size: 24px\r\n    }\r\n    p {\r\n      color: #495057;\r\n      font-size: 16px\r\n    }\r\n    @include md-screen() {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n    }\r\n  }\r\n  \r\n  .result {\r\n    @extend .result-base;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 32px;\r\n    align-items: center;\r\n    font-size: 24px;\r\n    color: #495057;\r\n    p {\r\n      margin: 0;\r\n      line-height: 150%;\r\n      word-break: break-all;\r\n    }\r\n    @include md-screen() {\r\n      justify-content: space-between;\r\n    }\r\n  }\r\n\r\n  .inactive {\r\n    display: none;\r\n  }\r\n}","// Screen size for responsive mobile-first approach\r\n$small-screen: 460px;\r\n$medium-screen: 769px;\r\n$large-screen: 1440px;\r\n\r\n// Breakpoint from 461px or greater\r\n@mixin sm-screen {\r\n    @media (min-width: #{$small-screen}) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// Breakpoint from 769 or greater\r\n@mixin md-screen {\r\n    @media (min-width: #{$medium-screen}) {\r\n        @content;\r\n    }\r\n}\r\n\r\n// Breakpoint from 1440px or greater\r\n@mixin lg-screen {\r\n    @media (min-width: #{$large-screen}) {\r\n        @content;\r\n    }\r\n}","@import './styles/buttons.scss';\r\n@import './styles/forms.scss';\r\n@import './styles/layout.scss';\r\n@import './styles/medias.scss';\r\n\r\nbody, html {\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: #f3f5fc;\r\n  font-family: 'Inter', sans-serif;\r\n  height: 100%;\r\n}"],sourceRoot:""}]);const c=a},645:r=>{"use strict";r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var t="",n=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),n&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=r(e),n&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(r,t,n,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var A=0;A<r.length;A++){var u=[].concat(r[A]);n&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:r=>{"use strict";r.exports=function(r){var e=r[1],t=r[3];if(!t)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:r=>{"use strict";var e=[];function t(r){for(var t=-1,n=0;n<e.length;n++)if(e[n].identifier===r){t=n;break}return t}function n(r,n){for(var i={},a=[],c=0;c<r.length;c++){var s=r[c],A=n.base?s[0]+n.base:s[0],u=i[A]||0,l="".concat(A," ").concat(u);i[A]=u+1;var p=t(l),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=o(f,n);n.byIndex=c,e.splice(c,0,{identifier:l,updater:d,references:1})}a.push(l)}return a}function o(r,e){var t=e.domAPI(e);return t.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;t.update(r=e)}else t.remove()}}r.exports=function(r,o){var i=n(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=n(r,o),A=0;A<i.length;A++){var u=t(i[A]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=s}}},569:r=>{"use strict";var e={};r.exports=function(r,t){var n=function(r){if(void 0===e[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(r){t=null}e[r]=t}return e[r]}(r);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}},216:r=>{"use strict";r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,t)=>{"use strict";r.exports=function(r){var e=t.nc;e&&r.setAttribute("nonce",e)}},795:r=>{"use strict";r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=r.insertStyleElement(r);return{update:function(t){!function(r,e,t){var n="";t.supports&&(n+="@supports (".concat(t.supports,") {")),t.media&&(n+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(n+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),n+=t.css,o&&(n+="}"),t.media&&(n+="}"),t.supports&&(n+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,r,e.options)}(e,r,t)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{"use strict";r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},61:(r,e,t)=>{var n=t(698).default;function o(){"use strict";r.exports=o=function(){return e},r.exports.__esModule=!0,r.exports.default=r.exports;var e={},t=Object.prototype,i=t.hasOwnProperty,a=Object.defineProperty||function(r,e,t){r[e]=t.value},c="function"==typeof Symbol?Symbol:{},s=c.iterator||"@@iterator",A=c.asyncIterator||"@@asyncIterator",u=c.toStringTag||"@@toStringTag";function l(r,e,t){return Object.defineProperty(r,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),r[e]}try{l({},"")}catch(r){l=function(r,e,t){return r[e]=t}}function p(r,e,t,n){var o=e&&e.prototype instanceof h?e:h,i=Object.create(o.prototype),c=new j(n||[]);return a(i,"_invoke",{value:E(r,t,c)}),i}function f(r,e,t){try{return{type:"normal",arg:r.call(e,t)}}catch(r){return{type:"throw",arg:r}}}e.wrap=p;var d={};function h(){}function m(){}function y(){}var C={};l(C,s,(function(){return this}));var g=Object.getPrototypeOf,v=g&&g(g(L([])));v&&v!==t&&i.call(v,s)&&(C=v);var x=y.prototype=h.prototype=Object.create(C);function w(r){["next","throw","return"].forEach((function(e){l(r,e,(function(r){return this._invoke(e,r)}))}))}function b(r,e){function t(o,a,c,s){var A=f(r[o],r,a);if("throw"!==A.type){var u=A.arg,l=u.value;return l&&"object"==n(l)&&i.call(l,"__await")?e.resolve(l.__await).then((function(r){t("next",r,c,s)}),(function(r){t("throw",r,c,s)})):e.resolve(l).then((function(r){u.value=r,c(u)}),(function(r){return t("throw",r,c,s)}))}s(A.arg)}var o;a(this,"_invoke",{value:function(r,n){function i(){return new e((function(e,o){t(r,n,e,o)}))}return o=o?o.then(i,i):i()}})}function E(r,e,t){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(t.method=o,t.arg=i;;){var a=t.delegate;if(a){var c=B(a,t);if(c){if(c===d)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===n)throw n="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);n="executing";var s=f(r,e,t);if("normal"===s.type){if(n=t.done?"completed":"suspendedYield",s.arg===d)continue;return{value:s.arg,done:t.done}}"throw"===s.type&&(n="completed",t.method="throw",t.arg=s.arg)}}}function B(r,e){var t=e.method,n=r.iterator[t];if(void 0===n)return e.delegate=null,"throw"===t&&r.iterator.return&&(e.method="return",e.arg=void 0,B(r,e),"throw"===e.method)||"return"!==t&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+t+"' method")),d;var o=f(n,r.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,d;var i=o.arg;return i?i.done?(e[r.resultName]=i.value,e.next=r.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function k(r){var e={tryLoc:r[0]};1 in r&&(e.catchLoc=r[1]),2 in r&&(e.finallyLoc=r[2],e.afterLoc=r[3]),this.tryEntries.push(e)}function S(r){var e=r.completion||{};e.type="normal",delete e.arg,r.completion=e}function j(r){this.tryEntries=[{tryLoc:"root"}],r.forEach(k,this),this.reset(!0)}function L(r){if(r){var e=r[s];if(e)return e.call(r);if("function"==typeof r.next)return r;if(!isNaN(r.length)){var t=-1,n=function e(){for(;++t<r.length;)if(i.call(r,t))return e.value=r[t],e.done=!1,e;return e.value=void 0,e.done=!0,e};return n.next=n}}return{next:_}}function _(){return{value:void 0,done:!0}}return m.prototype=y,a(x,"constructor",{value:y,configurable:!0}),a(y,"constructor",{value:m,configurable:!0}),m.displayName=l(y,u,"GeneratorFunction"),e.isGeneratorFunction=function(r){var e="function"==typeof r&&r.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(r){return Object.setPrototypeOf?Object.setPrototypeOf(r,y):(r.__proto__=y,l(r,u,"GeneratorFunction")),r.prototype=Object.create(x),r},e.awrap=function(r){return{__await:r}},w(b.prototype),l(b.prototype,A,(function(){return this})),e.AsyncIterator=b,e.async=function(r,t,n,o,i){void 0===i&&(i=Promise);var a=new b(p(r,t,n,o),i);return e.isGeneratorFunction(t)?a:a.next().then((function(r){return r.done?r.value:a.next()}))},w(x),l(x,u,"Generator"),l(x,s,(function(){return this})),l(x,"toString",(function(){return"[object Generator]"})),e.keys=function(r){var e=Object(r),t=[];for(var n in e)t.push(n);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=L,j.prototype={constructor:j,reset:function(r){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!r)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var r=this.tryEntries[0].completion;if("throw"===r.type)throw r.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var e=this;function t(t,n){return a.type="throw",a.arg=r,e.next=t,n&&(e.method="next",e.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],a=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var c=i.call(o,"catchLoc"),s=i.call(o,"finallyLoc");if(c&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(c){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(r,e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===r||"continue"===r)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=r,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(a)},complete:function(r,e){if("throw"===r.type)throw r.arg;return"break"===r.type||"continue"===r.type?this.next=r.arg:"return"===r.type?(this.rval=this.arg=r.arg,this.method="return",this.next="end"):"normal"===r.type&&e&&(this.next=e),d},finish:function(r){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===r)return this.complete(t.completion,t.afterLoc),S(t),d}},catch:function(r){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===r){var n=t.completion;if("throw"===n.type){var o=n.arg;S(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(r,e,t){return this.delegate={iterator:L(r),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}},e}r.exports=o,r.exports.__esModule=!0,r.exports.default=r.exports},698:r=>{function e(t){return r.exports=e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},r.exports.__esModule=!0,r.exports.default=r.exports,e(t)}r.exports=e,r.exports.__esModule=!0,r.exports.default=r.exports},687:(r,e,t)=>{var n=t(61)();r.exports=n;try{regeneratorRuntime=n}catch(r){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}}},e={};function t(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return r[n](i,i.exports,t),i.exports}t.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return t.d(e,{a:e}),e},t.d=(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),t.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r;t.g.importScripts&&(r=t.g.location+"");var e=t.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var n=e.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!r;)r=n[o--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=r})(),t.nc=void 0,(()=>{"use strict";function r(r,e,t,n,o,i,a){try{var c=r[i](a),s=c.value}catch(r){return void t(r)}c.done?e(s):Promise.resolve(s).then(n,o)}var e=t(687),n=t.n(e),o=t(379),i=t.n(o),a=t(795),c=t.n(a),s=t(569),A=t.n(s),u=t(565),l=t.n(u),p=t(216),f=t.n(p),d=t(589),h=t.n(d),m=t(99),y={};function C(r){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},C(r)}function g(r,e){for(var t=0;t<e.length;t++){var n=e[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(r,(o=n.key,i=void 0,i=function(r,e){if("object"!==C(r)||null===r)return r;var t=r[Symbol.toPrimitive];if(void 0!==t){var n=t.call(r,"string");if("object"!==C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(r)}(o),"symbol"===C(i)?i:String(i)),n)}var o,i}function v(r,e){var t=function(r,e,t){if(!e.has(r))throw new TypeError("attempted to get private field on non-instance");return e.get(r)}(r,e);return function(r,e){return e.get?e.get.call(r):e.value}(r,t)}function x(r,e,t){w(r,e),e.set(r,t)}function w(r,e){if(e.has(r))throw new TypeError("Cannot initialize the same private elements twice on an object")}y.styleTagTransform=h(),y.setAttributes=l(),y.insert=A().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=f(),i()(m.Z,y),m.Z&&m.Z.locals&&m.Z.locals,t.p,t.p,t.p;var b=new WeakMap,E=new WeakMap,B=new WeakSet;function k(){var r=this,e=Array.from(Object.values(v(this,b))),t=Array.from(Object.keys(v(this,b)));e.forEach((function(e,n){return v(r,E)[e]=t[n]}))}var S=new(function(){function r(){var e;!function(r,e){if(!(r instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),w(this,e=B),e.add(this),x(this,b,{writable:!0,value:{a:"ai",e:"enter",i:"imes",o:"ober",u:"ufat"}}),x(this,E,{writable:!0,value:{}}),function(r,e,t){if(!e.has(r))throw new TypeError("attempted to get private field on non-instance");return t}(this,B,k).call(this)}var e,t;return e=r,(t=[{key:"encryptText",value:function(r){for(var e=[],t=0;t<r.length;t++)r[t]in v(this,b)?e.push(v(this,b)[r[t]]):e.push(r[t]);return e.join("")}},{key:"decryptText",value:function(r){var e=this,t=r.split(" "),n=Array.from(Object.keys(v(this,E)));return t.forEach((function(r,o){n.forEach((function(t){var n=new RegExp(t,"g");r=r.replace(n,v(e,E)[t])})),t[o]=r})),t.join(" ")}}])&&g(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),r}()),j=document.querySelector("#text"),L=document.querySelector(".encrypt"),_=document.querySelector(".decrypt"),F=document.querySelector("#notFound"),I=document.querySelector("#result"),T=/^[a-z!¡¿?\s]+$/,O=function(r){var e='\n    <p class="result-text">'.concat(r,'</p>\n    <button class="btn btn__secondary white" id="copyBtn">Copiar</button>\n  ');I.innerHTML=e,F.classList.add("inactive"),I.classList.remove("inactive"),window.innerWidth<=768&&I.scrollIntoView({block:"center",behavior:"smooth"})};L.addEventListener("click",(function(){if(j.value&&T.test(j.value)){var r=S.encryptText(j.value);O(r)}else j.focus()})),_.addEventListener("click",(function(){if(j.value&&T.test(j.value)){var r=S.decryptText(j.value);O(r)}else j.focus()})),I.addEventListener("click",function(){var e,t=(e=n().mark((function r(e){var t;return n().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if("copyBtn"!==e.target.id){r.next=11;break}return t=I.querySelector(".result-text"),r.prev=3,r.next=6,navigator.clipboard.writeText(t.innerHTML);case 6:r.next=11;break;case 8:r.prev=8,r.t0=r.catch(3),console.error("Failed to copy: ",r.t0);case 11:case"end":return r.stop()}}),r,null,[[3,8]])})),function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function c(e){r(a,o,i,c,s,"next",e)}function s(e){r(a,o,i,c,s,"throw",e)}c(void 0)}))});return function(r){return t.apply(this,arguments)}}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,